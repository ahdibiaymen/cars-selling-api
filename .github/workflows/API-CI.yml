name: API-CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


defaults:
  run:
    working-directory: ./cars_api
jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DB_URL : 'test'
      DB_NAME : 'test'
      COLLECTION_NAME : 'test'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-asyncio pytest-mock mongomock-motor dotmap
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt;
        else
          echo requirements.txt not found!
        fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --extend-exclude=tests/* --ignore=E712,W503
        # exit-zero treats all errors as warnings. The GitHub editor is 90 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=90 --statistics --ignore=E712,W503

    - name: Test with pytest
      run: |
          pytest --disable-warnings


  code-security-check-SAST:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt;
          else
            echo requirements.txt not found!
          fi

      - name: Bandit scanner
        run: |
          bandit -r -ll .

      - name: PyCharm Python Security Scanner
        uses: tonybaloney/pycharm-security@1.25.1

#      - name: Run Snyk to check for vulnerabilities
#        uses: snyk/actions/node@master
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Build the image of car-selling-api
        run: |
          docker build -t car-api:latest .

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: car-api
          path: /tmp/car-api.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'car-api:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'


  code-security-check-DAST:
    needs: code-security-check-SAST
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      mongodb:
          image: mongo
          env:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: root
          ports:
            - 27017:27017

    steps:
      - uses: actions/checkout@v3

      - name: Install Mongosh
        run: |
          sudo apt-get install gnupg
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
          mongosh --version

      - name: Initialize MongoDB for dev environment
        run: |
          mongosh --host localhost:27017 -u root -p root --authenticationDatabase admin <<EOF
            db = db.getSiblingDB('cars_db');
            db.createUser({ user: 'admin', pwd: 'admin', roles: [{ role: 'readWrite', db: 'cars_db' }] })
            db.createCollection('cars');
          EOF

      - name: Set up .env file for dev
        env:
          DB_URL: mongodb://admin:admin@localhost:27017/cars_db
          DB_NAME: cars_db
          COLLECTION_NAME: cars
          MODE: dev
        run: |
          cp .env.sample .env
          sed -i "s/^DB_URL=.*/DB_URL=$DB_HOST/" .env
          sed -i "s/^DB_NAME=.*/DB_NAME=$DB_PORT/" .env
          sed -i "s/^COLLECTION_NAME=.*/COLLECTION_NAME=$DB_USER/" .env
          sed -i "s/^MODE=.*/MODE=$MODE/" .env


      - name: Download image artifact
        uses: actions/download-artifact@v3
        with:
          name: car-api
          path: /tmp/

      - name: Load image
        run: |
          docker load --input /tmp/car-api.tar

      - name: Run application Docker container
        run: |
          docker run --name car-api-app -p 8000:8000 --env-file .env -d car-api:latest

      - name: Wait for app to start
        run: |
          sleep 5s

      - name: App healthiness test
        run: |
          curl http://localhost:8000/docs

      - name: ZAP API Scan
        uses: zaproxy/action-api-scan@v0.6.0
        with:
          target: 'http://localhost:8000'
          format: openapi
          cmd_options: '-a'


#  unify-code:
#    needs: code-security-check-DAST
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up Python 3.10
#        uses: actions/setup-python@v3
#        with:
#          python-version: "3.10"
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install black isort
#
#      - name: Python Isort
#        run: |
#          isort --profile black --line-length 100 .
#      - name: Python Black
#        run: |
#          black --line-length=100 --preview .
#
#      - name: Auto-commit updated files
#        uses: stefanzweifel/git-auto-commit-action@v5
#        with:
#          commit_message: Automated code unifying
#          add_options: "-u"
